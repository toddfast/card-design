#target illustratorFunction.prototype.partial = function(){	var fn = this, args = Array.prototype.slice.call(arguments);	return function(){	  var arg = 0;	  for ( var i = 0; i < args.length && arg < arguments.length; i++ )		if ( args[i] === undefined )		  args[i] = arguments[arg++];	  return fn.apply(this, args);	};};Function.prototype.curry = function() {	var fn = this, args = Array.prototype.slice.call(arguments);	return function() {	  return fn.apply(this, args.concat(		Array.prototype.slice.call(arguments)));	};};function showError(e, message) {    message = message || "Script error";    var properties = [];    for (property in e) {        if (property !== "source") {            properties.push(property+": "+e[property]);        }    }    alert(message+        "\n"+properties.join("\n")+        "\n\nStack trace:\n"+$.stack);}function startsWith(str, searchString, position){  position = position || 0;  return str.substr(position, searchString.length) === searchString;};function pad(num, numChars) {    return (1e15+num+"").slice(-numChars);}function rgb(red, green, blue) {    var color = new RGBColor();    color.red = red || 0;    color.green = green || 0;    color.blue = blue || 0;    return color;}function setChildrenVisibile(field, visible) {    if (field) {		if (typeof field === "string") {			throw "Parameter \"field\" must be a page item, not a string";		}		if (typeof field.pageItems === "undefined") {			throw "pageItems undefined for field \""+field+"\"";		}        var i;        for (i = 0; i < field.pageItems.length; i++) {            field.pageItems[i].hidden = !visible;        }    }	else {		throw "Parameter \"field\" undefined";	}}function setLayerVisible(doc, name, visible) {	doc.layers.getByName(name).visible = visible;}function variable(doc, name) {	try {		return doc.variables.getByName(name);	}	catch (e) {		throw "Variable \""+name+"\" not found";	}}function firstPageItem(doc, name) {    var v = variable(doc,name);    return (!!v) ? v.pageItems[0] : null;}function setFieldValue(doc, name, value) {    if (!value) {        value = "";    }    firstPageItem(doc,name).contents = value;}function getExportArtboardIndex(doc) {	// Get the Export artboard	var exportArtboardIndex = -1;	for (i = 0; i < doc.artboards.length; i++) {		if (doc.artboards[i].name === "Export") {			exportArtboardIndex = i;			break;		}	}	if (exportArtboardIndex >= 0) {		doc.artboards.setActiveArtboardIndex(exportArtboardIndex);	}	else {		alert("No artboard \"Export\" defined. Using default.");	}	return exportArtboardIndex;}function loadRecords(dataFile, callback) {	var dataContent;	dataFile.open("r");	try {		dataContent = dataFile.read();	}	finally {		dataFile.close();	}	if (!dataContent || dataContent.length == 0) {		alert("Data file not found: "+dataFile);		return;	}	var records = dataContent.split("\n");	var record;	for (i=0; i < records.length; i++) {		if (records[i].length === 0) {			continue;		}		record = records[i]; //.split(",");		callback(record);	}}function renderCardOutput(settings, outputFolder, records, callback) {	if (!outputFolder.exists) {		outputFolder.create();	}	var record;	for (i=0; i < records.length; i++) {		record = records[i];				if (!record) {			alert("Record "+i+" undefined: "+record);			continue;		}		var outputFile = new File(outputFolder.fullName+"/card"+pad(i+1,3));		var result = callback(record);		if (!result) {			return;		}		exportToPNG24(outputFile);		// exportToTIFF(outputFile);		saveToPDF(outputFile,(settings.exportArtboardIndex+1)+"-"+(settings.exportArtboardIndex+1));		// Export thumbnail		setLayerVisible(settings.doc,"Frame",true);		outputFile = new File(outputFile.fullName+"-preview");		exportToPNG24(outputFile);		setLayerVisible(settings.doc,"Frame",false);	}	callback(records[records.length-1]);}function exportToPNG24(fileName) {    if (app.documents.length > 0) {        var exportOptions = new ExportOptionsPNG24();        var type = ExportType.PNG24;        exportOptions.artBoardClipping = true;        exportOptions.antiAliasing = true;        exportOptions.transparency = true;        exportOptions.saveAsHTML = false;        exportOptions.horizontalScale = 300 / 72 * 100;        exportOptions.verticalScale = 300 / 72 * 100;// None of these are documented, nor do they work; just hoping to get the // PNG metadata to specify 300 DPIexportOptions.resolution = 300;exportOptions.outputResolution = 300;exportOptions.pixelDensity = 300;        var file = new File(fileName);        app.activeDocument.exportFile(file,type,exportOptions);    }}function exportToTIFF(fileName) {    if (app.documents.length > 0) {        var exportOptions = new ExportOptionsTIFF();        var type = ExportType.TIFF;        exportOptions.saveMultipleArtboards = true;        exportOptions.artboardRange = "1";        exportOptions.antiAliasing = AntiAliasingMethod.TYPEOPTIMIZED;        exportOptions.resolution = 300;        exportOptions.byteOrder = TIFFByteOrder.MACINTOSH;        exportOptions.imageColorSpace = ImageColorSpace.CMYK;        exportOptions.IZWCompression = true;        var file = new File(fileName);        app.activeDocument.exportFile(file,type,exportOptions);    }}function saveToPDF(fileName, artboardRange) {    if (app.documents.length > 0) {        var options = new PDFSaveOptions();        options.compatibility = PDFCompatibility.ACROBAT8;        options.acrobatLayers = false;        options.generateThumbnails = true;        options.preserveEditability = false;        options.viewAfterSaving = false;        options.artboardRange = artboardRange || "";		options.colorDestinationID = ColorDestination.COLORDESTINATIONDOCCMYK;		options.colorProfileID = ColorProfile.INCLUDEDESTPROFILE;        options.flattenerOptions = new PrintFlattenerOptions();        options.flattenerOptions.convertTextToOutlines = true;        var file = new File(fileName);        app.activeDocument.saveAs(file,options);    }}