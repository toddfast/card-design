#target illustrator#include "../lib/common.jsx"$.strict = true;(function main(doc) {	var card;    try {		var settings = loadSettings(doc);		// Instantiate our Card template object		card = new Card(settings);		card.preserveState();		var records = [];		// Load the records from the CSV file		loadRecords(settings.dataFile,			function recordCallback(record) {				// This is tab-separated value data				record = record.split("\t");				// If blank line or the first line of the file				if (record[0].length === 0 || record[0] === "Title") {					return;				}				if (settings.maxRecords > 0 && records.length > settings.maxRecords) {					return;				}				records.push({					title: record[0],					subtitle: record[1],					description: record[2],					dot: record[3],					metadata: records.length + 1				});			});			renderCardOutput(			settings,			settings.outputFolder,			records,			function renderCallback(record) { 				try {					card.setTitle(record.title);					card.setSubtitle(record.subtitle);					card.setDescription(record.description);					card.setDot(record.dot);					card.setMetadata("Card "+record.metadata + "/" + records.length);					// card.setArt(record.name);					card.setVersion(settings.version);					redraw();					return true;				}				catch (e) {					showError(e);					return false;				}			});	}	catch (e) {		showError(e);	}	finally {		card.restoreState();	}})(app.activeDocument);function loadSettings(doc) {	var settings = {		version: "v0.1.0",		dataSet: "example",		doc: doc,		exportArtboardIndex: getExportArtboardIndex(doc),		rootFolder: new Folder(new File($.fileName).path+"/.."),		maxRecords: -1	};	// HACK	// <-- This extra .. relative path is a hack and	// doesn't generalize outside of this repo's structure//	settings.rootFolder = new Folder(settings.rootFolder.fullName+"/..");	settings.dataFile = new File(settings.rootFolder.fullName+"/data/"+		settings.dataSet+"-"+settings.version+".tsv");			// Create the output path	settings.outputFolder = new Folder(settings.rootFolder.fullName+"/output/"+		settings.dataSet+"-cards-"+settings.version+"/");	return settings;}function Card(settings) {	var doc = settings.doc;	var state = {	};	function preserveState() {		state.artboardIndex = settings.doc.artboards.getActiveArtboardIndex();		setLayerVisible(doc,"Card Template",false);		setLayerVisible(doc,"Frame",false);	}	function restoreState() {		try {			if (state.artboardIndex) {				doc.artboards.setActiveArtboardIndex(state.artboardIndex);			}		}		catch (e) {			showError(e);		}	}	function setTitle(value) {		setFieldValue(doc,"title",value);	}	function setSubtitle(value) {		setFieldValue(doc,"subtitle",value);	}	function setDescription(value) {		setFieldValue(doc,"description",value);	}	function setDot(value) {		firstPageItem(doc,"dot").hidden = !!!value;	}	function setMetadata(value) {		setFieldValue(doc,"metadata",value);	}	function setVersion(value) {		setFieldValue(doc,"version",value);	}	function setArt(name) {		var artLayer = variable(doc,"artLayer").pageItems[0];		var i;		for (i = 0; i < artLayer.pageItems.length; i++) {			artLayer.pageItems[i].hidden = true;		}		var art;		try {			art = artLayer.pageItems.getByName(name);		}		catch (e) {			// Ignore		}		if (art) {			art.hidden = false;		}		else {			try {				art = artLayer.pageItems.getByName("Default");				art.hidden = false;			}			catch (e) {				// Ignore			}		}	}	var publicInterface = {		preserveState: preserveState,		restoreState: restoreState,		setTitle: setTitle,		setSubtitle: setSubtitle,		setDescription: setDescription,		setDot: setDot,		setMetadata: setMetadata,		setArt: setArt,		setVersion: setVersion	};	return publicInterface;}