#target illustrator#include "common.jsx"$.strict = true;function generatePrintableCardFiles(settings) {    try {		if (!settings) {			throw new Error("No settings specified");		}		if (!settings.cardDirectoryName) {			throw new Error("Parameter \"cardDirectoryName\" must be specified");		}		var doc;		var cardFileExtension = settings.cardFileExtension || ".pdf";		var scriptFile = new File($.fileName);		var rootFolder = settings.rootFolder || new Folder(scriptFile.path+"/../..");// <-- This extra .. relative path is a hack and// doesn't generalize outside of this repo's structurerootFolder = new Folder(rootFolder.fullName+"/..");		var templateFile = settings.templateFile || 			new File(rootFolder.fullName+"/templates/template-cards-bridge-cut-8in12in-v2.ai");		doc = app.open(templateFile);		var cardLocations = variable(doc,"cards").pageItems;		var cardLabels = variable(doc,"labels").pageItems;		var cardDirectoryName = settings.cardDirectoryName;		// Create the output path		var cardName;		var cardNames = [];		var cardFile;		var cardFolder = new Folder(rootFolder.fullName+"/output/"+cardDirectoryName+"/");		var cardFiles = cardFolder.getFiles("card???"+cardFileExtension);		var outputFile;		var outputFolder = new Folder(rootFolder.fullName+"/output/"+cardDirectoryName+"-print/");		if (!outputFolder.exists) {			outputFolder.create();		}		var i;		var orientation;		var cardLocation;		var cardLabel;		function save() {			// Once all slots are full, or at the end of the list, save			app.redraw()			outputFile = new File(outputFolder.fullName+"/"+cardDirectoryName.split(".").join("_")+"-"+				(cardNames[0]+"-"+cardNames[cardNames.length-1]));			firstPageItem(doc,"fileName").contents = outputFile.name;			//alert("Saving "+outputFile.fullName);			saveToPDF(outputFile);			// Reset the template			cardNames = [];			doc.placedItems.removeAll();		}		for (i = 0; i < cardFiles.length; i++) {			cardName = pad(i+1,3);			cardNames.push(cardName);			cardFile = new File(cardFolder.fullName+"/card"+cardName+cardFileExtension);			var placedCard = doc.placedItems.add();						try {				placedCard.file = new File(cardFile);			}			catch (e) {				showError(e,"Unable to place file: "+cardFile.fullName);				continue;			}			cardLocation = cardLocations[i % cardLocations.length];//			cardLabel = cardLabels[i % cardLabels];			orientation = (cardLocation.width < cardLocation.height) 				? "portrait" 				: "landscape";			if (orientation === "landscape") {				placedCard.rotate(90);			}			// Locate the placed card			placedCard.top = cardLocation.top;			placedCard.left = cardLocation.left;			cardLabel = cardLabels[i % cardLabels.length];			cardLabel.contents = cardFile.name;			// Once all slots are full, save			if ( ((i > 0) && ((i+1) % cardLocations.length === 0)) ) {				save();			}		}		// At the end of the list, save		if (cardNames.length > 0) {			save();		}	}	catch (e) {		showError(e);				// Avoid closing the document		doc = null;	}	finally {		try {			if (doc) {				doc.close(SaveOptions.DONOTSAVECHANGES);			}		}		catch (e) {			// Ignore		}	}}